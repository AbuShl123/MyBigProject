
-----------------------------------------------REFERENCE TYPE CASTING---------------------------------------------------

    able to cast/change the reference of the object to a different reference type

    upcasting : from sub class to a super class
        automatically/implicitly

    down-casting : from super class to a sub class
        manually/explicitly

WebDrier driver = new ChromeDriver();

scenario: fail the test, so we want to take a screenshot

    driver -> this is a WebDriver interface, but WebDriver interface does not know screenshot method

    ( (TakeScreenShot) driver).screenshot() -> now the reference was cast to TakeScreenshot interface, which has access
                                               to the screenshot() method. Now we can execute the method

----------------------------------------------DYNAMIC POLYMORPHISM------------------------------------------------------

static polymorphism / static polymorphism / compile time binding
    method overloading

dynamic polymorphism / dynamic polymorphism / run time binding
    method overriding

    calling a method and executing are different and they ar enot linked
    you can call a method everywhere
    execution happens during runtime

-----------------------------------------------COLLECTION FRAMEWORK-----------------------------------------------------

    -- a group of interfaces and classes that define the structures that handle data differently
    -- They define how data is added, or read from etc, based on different algorithms and implementations

    data structure
        array: size fixed, no methods, allows primitive data types and non-primitive types
        Collections: more flexible, have different ways to handle data, only works with object types (non-primitive),
        has methods.

Main interface of the Framework:

    Collection: the parent of the collection types, defines the main functions of the collection
        ex: add(), remove(), size()

    List: ordered(index), allows duplicates

    Set: unordered(no indexes), no duplicates

Classes that implement List:

    ArrayList: data structure that uses array internally. Re-sizable array
        useful to storing and reading the information

    LinkedList: data structure that uses nodes internally
        also implements the Deque -> doubly linked
        useful to manipulate the collection. adding and removing is handled efficiently
        Node - the object that has the value reference to the node before and reference to the node after it

    Vector: legacy version of ArrayList. It is synchronized
        -> synchronization: thread-safe
        -> thread-safe: multiple threads cannot access at the same time
                                                            think of atm example

Classes that implement Set:

    HashSet: follows a Hashing algorithm, which means handles data fast and efficiently
        data structure that uses HashMap internally (talk about this later)
    the order is basically random

    LinkedHashSet: data structure that uses HashTable and LinkedList implementations
            the insertion order is maintained

    -> interface: SortedSet extends Set
            TreeSet implements SortedSet
                elements sorted in natural order (sorted order, smallest to largest, lexicographical)
                null is not allowed

Q: What's the difference between Collection and Collections ?
    Collection : main interface in the Collection framework
    Collections : utility class that has some useful methods for collection types
        sort(), max(), frequency()


----------------------------------------------------STACK && QUEUE------------------------------------------------------
Stack

    sub class of Vector

    LIFO : Last In First Out

    This of a stack of books

    book3
    book2
    book1

    book3 is on top of the stack

    if you want to remove from the stack, book3 would be removed first

    you are left with

    book2
    book1

    methods related to LIFO :

    push(): adding the element to the top of the stack. also returns the element added
    pop(): removing the element at the top of the stack. Also returns that element removed
    peek(): returns th element at the top of the stack

difference between add() and push()

    functions of both are the same. Add method is coming from the Collection interface and the push methods is defied
    in the Stack class

    add method returns boolean

    push method return the object added


Queue

    Queue is an interface inheriting the Collection interface

    LIFO: Last In Last Out

    Think of a line

    P1 <- P2 <- P3

    P1 leaves first because they are at the beginning of the Queue

    P2 <- P3

Deque: an interface that allows access to elements from the beginning or end
    child of the Queue interface

Classes that implement Queue

    PriorityQueue: data structure that stores elements based on its own priority, Sometimes looks like natural order,
    but cannot be predicted (random)

        does not accept null

    Note: Even though Queue is the interface the PriorityQueue has its own implementation of the idea

    ArrayDeque : implementing Deque. More proper Queue type
        also has access to both side of the collection

        does not accept null
Methods:

    add()       |>     offer()

    remove()    |>     poll()

    element()   |>     peek()

    The methods on the left can cause the exception to occur whenever the method fails
    The methods on the right just return null;
